@page "/CreateNotification"
@using crudAppCW2.Models
@using crudAppCW2.Data
@using crudAppCW2.Data.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<AppDbContext> ContextFactory


<PageTitle>Create Notification</PageTitle>

<h3>Create Notification</h3>

@if (NotificationCreated)
{
    <div class="alert alert-success">
        Notification created successfully!
    </div>
}

<EditForm Model="@CreateNotificationModel" OnValidSubmit="CreateNewNotification">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="form-group">
        <label for="subject">Subject:</label>
        <InputText id="subject" class="form-control" @bind-Value="CreateNotificationModel.Subject"/>
        <ValidationMessage For="@(() => CreateNotificationModel.Subject)"/>
    </div>

    <div class="form-group">
        <label for="body">Body:</label>
        <InputTextArea id="body" class="form-control" @bind-Value="CreateNotificationModel.Body"/>
        <ValidationMessage For="@(() => CreateNotificationModel.Body)"/>
    </div>

    <div class="form-group">
        <label for="roleId">Role:</label>
        <InputSelect id="roleId" class="form-control" @bind-Value="CreateNotificationModel.RoleId">
            <option value="">--Select a Role--</option>
            @foreach (var role in Roles)
            {
                <option value="@role.RoleId">@role.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => CreateNotificationModel.RoleId)"/>
    </div>

    <div class="form-group">
        <label for="userId">User:</label>
        <InputSelect id="userId" class="form-control" @bind-Value="CreateNotificationModel.UserId" multiple>
            <option value="">--Select Users--</option>
            @foreach (var user in Users)
            {
                <option value="@user.UserId">@user.FirstName @user.LastName</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => CreateNotificationModel.UserId)"/>
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
</EditForm>

@code {
    private CreateNotificationModel CreateNotificationModel { get; set; } = new CreateNotificationModel();
    
    private IList<Role> Roles { get; set; } = new List<Role>();
    private IList<User> Users { get; set; } = new List<User>();

    private bool NotificationCreated { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadRoles();
        await LoadUsers();
    }

    private async Task LoadRoles()
    {
        await using var context = await ContextFactory.CreateDbContextAsync();
        var roles = await context.Role.ToListAsync();
        Roles.Clear();
        foreach (var role in roles)
        {
            Roles.Add(role);
        }
    }

    private async Task LoadUsers()
    {
        await using var context = await ContextFactory.CreateDbContextAsync();
        var users = await context.User.ToListAsync();
        Users.Clear();
        foreach (var user in users)
        {
            Users.Add(user);
        }
    }



    private async Task CreateNewNotification(EditContext editContext)
    {
        await using var context = await ContextFactory.CreateDbContextAsync();

    // Create the notification
        var notification = new Notification
        {
            Subject = CreateNotificationModel.Subject,
            Body = CreateNotificationModel.Body,
            RoleId = CreateNotificationModel.RoleId
        };

        context.Notification.Add(notification);
        await context.SaveChangesAsync();
        NotificationCreated = true;
    }

}