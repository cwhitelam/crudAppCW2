@page "/CreateNotification"
@using crudAppCW2.Data
@using crudAppCW2.Data.Models
@using Microsoft.EntityFrameworkCore
@using System.Linq
@inject IDbContextFactory<AppDbContext> ContextFactory
@inject NavigationManager NavigationManager

<PageTitle>Create Notification</PageTitle>

<h3>Create Notification</h3>

@if (NotificationCreated)
{
    <div class="alert alert-success">
        Notification created successfully!
    </div>
}

<EditForm Model="@Notification" OnValidSubmit="CreateNewNotification">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="form-group">
        <label for="subject">Title:</label>
        <InputText id="subject" class="form-control" @bind-Value="Notification.Title"/>
        <ValidationMessage For="@(() => Notification.Title)"/>
    </div>

    <div class="form-group">
        <label for="body">Description:</label>
        <InputTextArea id="body" class="form-control" @bind-Value="Notification.Description"/>
        <ValidationMessage For="@(() => Notification.Description)"/>
    </div>
    <br/>
    <div class="d-flex">
        <div class="mb-3 me-5">
            <label class="me-2">Choose Role:</label>
            <div class="d-flex flex-column">
                @foreach (var notificationRole in Notification.NotificationRoles)
                {
                    <div class="d-flex mb-2">
                        <select @bind="notificationRole.RoleId" class="form-select" style="width: 160px;">
                            @foreach (var role in Roles)
                            {
                                <option value="@role.RoleId">@role.Name</option>
                            }
                        </select>
                        <button type="button" class="btn btn-danger ms-2" @onclick="@(() => Notification.NotificationRoles.Remove(notificationRole))">
                            Remove
                        </button>
                    </div>
                }
                <button type="button" class="btn btn-primary mt-2" @onclick="@(() => Notification.NotificationRoles.Add(new NotificationRole { RoleId = 1 }))">
                    Add Role +
                </button>
            </div>
        </div>
        <div class="mb-4">
            <label class="me-2">Choose User(s):</label>
            <div class="d-flex flex-column">
                @foreach (var notificationUser in Notification.NotificationUsers)
                {
                    <div class="d-flex mb-2">
                        <select @bind="notificationUser.UserId" class="form-select" style="width: 160px;">
                            @foreach (var user in Users)
                            {
                                <option value="@user.UserId">@user.FirstName @user.LastName</option>
                            }
                        </select>
                        <button type="button" class="btn btn-danger ms-2" @onclick="@(() => Notification.NotificationUsers.Remove(notificationUser))">
                            Remove
                        </button>
                    </div>
                }
                <button type="button" class="btn btn-primary mt-2" @onclick="@(() => Notification.NotificationUsers.Add(new NotificationUser { UserId = 1 }))">
                    Add User +
                </button>
            </div>
        </div>
    </div>


    <button type="submit" class="btn btn-primary">Create</button>
    <button type="button" class="btn btn-secondary" @onclick="NavigateBack">Back</button>

</EditForm>

@code {

    private Notification Notification { get; set; } = new Notification()
    {
        NotificationRoles = new(),
        NotificationUsers = new()
    };

    private IList<Role> Roles { get; set; } = new List<Role>();
    private IList<User> Users { get; set; } = new List<User>();
    
    private bool NotificationCreated { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadRoles();
        await LoadUsers();
    }

    private async Task LoadRoles()
    {
        await using var context = await ContextFactory.CreateDbContextAsync();
        var roles = await context.Role.ToListAsync();
        Roles.Clear();
        foreach (var role in roles)
        {
            Roles.Add(role);
        }
    }

    private async Task LoadUsers()
    {
        await using var context = await ContextFactory.CreateDbContextAsync();
        var users = await context.User.OrderBy(u => u.FirstName).ToListAsync();
        Users.Clear();
        foreach (var user in users)
        {
            Users.Add(user);
        }
    }


    private async Task CreateNewNotification(EditContext editContext)
    {
        await using var context = await ContextFactory.CreateDbContextAsync();

    // Create the notification
        var notification = new Notification
        {
            Title = Notification.Title,
            Description = Notification.Description,
            CreatedDateTime = DateTime.Now,
            NotificationRoles = Notification.NotificationRoles,
            NotificationUsers = Notification.NotificationUsers
        };

        context.Notification.Add(notification);
        await context.SaveChangesAsync();
        NotificationCreated = true;

    // Navigate to the notification list page
        NavigationManager.NavigateTo("/NotificationList");
    }


    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/NotificationList");
    }


}