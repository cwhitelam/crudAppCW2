@page "/CreateUser"
@using Microsoft.AspNetCore.Components
@using crudAppCW2.Data
@using crudAppCW2.Data.Models
@using crudAppCW2.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<AppDbContext> ContextFactory


<PageTitle>Create User</PageTitle>

<h3>Create New User</h3>

<EditForm Model="@User" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="form-group">
        <label for="firstName">First Name:</label>
        <InputText @bind-Value="User.FirstName" placeholder="First Name" class="form-control" style="width: 450px;" @oninput="(() => CapitalizeName(User, u => u.FirstName, (u, value) => u.FirstName = value))"/>
        <ValidationMessage For="@(() => User.FirstName)"/>
    </div>

    <div class="form-group">
        <label for="lastName">Last Name:</label>
        <InputText @bind-Value="User.LastName" placeholder="Last Name" class="form-control" style="width: 450px;" @oninput="(() => CapitalizeName(User, u => u.LastName, (u, value) => u.LastName = value))"/>
        <ValidationMessage For="@(() => User.LastName)"/>
    </div>

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText @bind-Value="User.Email" placeholder="Email" class="form-control" style="width: 450px;"/>
        <ValidationMessage For="@(() => User.Email)"/>
    </div>

    <div class="form-group d-flex">
        <div class="mr-4">
            <label for="role1">Choose Role:</label>
            @foreach (var userRole in User.UserRoles)
            {
                <div class="d-flex mb-2 me-3">
                    <select @bind="userRole.RoleId" class="form-select" style="width: 160px;">
                        @foreach (var role in Roles)
                        {
                            <option value="@role.RoleId">@role.Name</option>
                        }
                    </select>
                    <button type="button" class="btn btn-danger ms-2" @onclick="@(() => User.UserRoles.Remove(userRole))">
                        Remove
                    </button>
                </div>
            }
            <button type="button" class="btn btn-primary" @onclick="@(() => User.UserRoles.Add(new UserRole { RoleId = 1 }))">
                Add Role +
            </button>
        </div>

        <div>
            <label for="role2">Choose Department:</label>
            <select @bind="User.DepartmentId" class="form-select" style="width: 290px;">
                @foreach (var department in Departments)
                {
                    <option value="@department.DepartmentId">@department.Name</option>
                }
            </select>
        </div>
    </div>

    <br/>
    <button class="btn btn-primary" type="submit">Add User</button>
    <button class="btn btn-secondary" @onclick="CreateUsers">Back</button>

</EditForm>


@code {
    private User? User = new User
    {
        UserRoles = new List<UserRole>
        {
            new() { RoleId = 1 }
        }
    };

    private List<Department> Departments { get; set; }
    private List<Role> Roles { get; set; }

    private bool IsBusy { get; set; }

    private string? SuccessMessage { get; set; }

    private string? ErrorMessage { get; set; }

    [Inject]
    private NavigationManager _navigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    
    private async Task LoadData()
    {
        await using var context = ContextFactory.CreateDbContext();
        Departments = await context.Department.ToListAsync();
        Roles = await context.Role.ToListAsync();
    }
    
    private async Task HandleValidSubmit()
    {
        if (IsBusy)
        {
            return;
        }

        IsBusy = true;

        try
        {
            if (User is not null)
            {
    // Capitalize first and last name before saving
                CapitalizeName(User, u => u.FirstName, (u, value) => u.FirstName = value);
                CapitalizeName(User, u => u.LastName, (u, value) => u.LastName = value);

                User.DepartmentId = User.DepartmentId; // Set DepartmentId

                await using var context = await ContextFactory.CreateDbContextAsync();

                context.User.Add(User);
                await context.SaveChangesAsync();

                SuccessMessage = $"User {User.FirstName} {User.LastName} was added successfully.";
                ErrorMessage = null;

    // Reset User object for next creation
                User = new User
                {
                    UserRoles = new List<UserRole>
                    {
                        new() { RoleId = 1 }
                    }
                };
            }
        }
        catch (Exception ex)
        {
            SuccessMessage = null;
            ErrorMessage = $"Error while adding user: {ex.Message}";
        }
        finally
        {
            IsBusy = false;
        }
    }


    private void CapitalizeName(User user, Func<User, string> nameSelector, Action<User, string> nameSetter)
    {
        var name = nameSelector(user);
        if (string.IsNullOrWhiteSpace(name))
        {
            return;
        }

        var words = name.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

        for (int i = 0; i < words.Length; i++)
        {
            var word = words[i];
            words[i] = char.ToUpper(word[0]) + word.Substring(1).ToLower();
        }

        name = string.Join(" ", words);
        nameSetter(user, name);
    }

    private void CreateUsers()
    {
        _navigationManager.NavigateTo("/Users");
    }

    private void HandleInvalidSubmit()
    {
        SuccessMessage = null;
        ErrorMessage = null;
    }

}