@page "/CreateUser"
@using Microsoft.AspNetCore.Components
@using crudAppCW2.Models
@using crudAppCW2.Data
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<AppDbContext> ContextFactory


<PageTitle>Create User</PageTitle>

<h3>CreateUser</h3>

<EditForm Model="@User" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="form-group">
        <label for="firstName">First Name:</label>
        <InputText @bind-Value="User.FirstName" placeholder="First Name" class="form-control" style="width: 450px;"/>
        <ValidationMessage For="@(() => User.FirstName)"/>
    </div>

    <div class="form-group">
        <label for="lastName">Last Name:</label>
        <InputText @bind-Value="User.LastName" placeholder="Last Name" class="form-control" style="width: 450px;"/>
        <ValidationMessage For="@(() => User.LastName)"/>
    </div>

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText @bind-Value="User.Email" placeholder="Email" class="form-control" style="width: 450px;"/>
        <ValidationMessage For="@(() => User.Email)"/>
    </div>

    <div class="form-group">
        <label for="role">Choose a Role:</label>
        <select @bind="User.RoleId" class="form-select" style="width: 200px;">
            <option value="Admin">Admin</option>
            <option value="User">User</option>
        </select>
    </div>

    <button class="btn btn-primary" @onclick="CreateUsers">Add This User</button>
</EditForm>


@code {
    private User? User = new User();

    private bool IsBusy { get; set; }

    private string? SuccessMessage { get; set; }

    private string? ErrorMessage { get; set; }

    [Inject]
    private NavigationManager _navigationManager { get; set; }

    private async Task HandleSubmit(bool isValid)
    {
        if (isValid)
        {
            await HandleValidSubmit();
        }
        else
        {
            HandleInvalidSubmit();
        }
    }

    private async Task HandleValidSubmit()
    {
        if (IsBusy)
        {
            return;
        }

        IsBusy = true;

        try
        {
            if (User is not null)
            {
                await using var context = await ContextFactory.CreateDbContextAsync();

                context.Users.Add(User);
                await context.SaveChangesAsync();

                SuccessMessage = $"Employee {User.FirstName} {User.LastName} was added successfully.";
                ErrorMessage = null;

    // New Employee for next creation
                User = new User
                {
                    RoleId = User.RoleId
                };
            }
        }
        catch (Exception ex)
        {
            SuccessMessage = null;
            ErrorMessage = $"Error while adding employee: {ex.Message}";
        }
        finally
        {
            IsBusy = false;
        }
    }

    private void CreateUsers()
    {
        _navigationManager.NavigateTo("/Users");
    }

    private void HandleInvalidSubmit()
    {
        SuccessMessage = null;
        ErrorMessage = null;
    }

}