@page "/DeletedUsers"
@using crudAppCW2.Data
@using crudAppCW2.Data.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<AppDbContext> ContextFactory
@inject NavigationManager NavigationManager

<PageTitle>Deleted Users</PageTitle>

<h3>Recently Deleted Users</h3>
<br/>
<button class="btn btn-outline-secondary btn-sm me-2" @onclick="SelectAllUsers">Select All</button>
<button class="btn btn-outline-success btn-sm" @onclick="async () => await RestoreSelectedUsers()">Restore Selected</button>


@if (DeletedUsersTable.Count == 0)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Select</th>
            <th>User</th>
            <th>Email</th>
            <th>Role</th>
            <th>Department</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var user in DeletedUsersTable)
        {
            <tr>
                <td>
                    <input type="checkbox" @bind="user.IsSelected"/>
                </td>
                <td>@User.GetCapitalizedString(user.FirstName) @User.GetCapitalizedString(user.LastName)</td>
                <td>@user.Email</td>
                <td>
                    @foreach (var userRole in user.UserRoles)
                    {
                        <div class="me-1">
                            @userRole.Role?.Name
                        </div>
                    }
                </td>
                <td>
                    @user.Department?.Name
                </td>
                <td>
                    <button class="btn btn-success" @onclick="async () => await RestoreUser(user.UserId)">Restore</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
    <button class="btn btn-primary" @onclick="NavigateToUsers">Back to Users</button>
}

@code {
    private List<User> DeletedUsersTable { get; set; } = new List<User>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        await using var context = await ContextFactory.CreateDbContextAsync();
        DeletedUsersTable = await context.User
            .Include(x => x.Department)
            .Include(x => x.UserRoles).ThenInclude(x => x.Role)
            .Where(x => x.IsRestored && !x.IsSelected) // only load deleted users that are not selected for deletion
            .ToListAsync();
    }


    private async Task RestoreUser(int id)
    {
        await using var context = await ContextFactory.CreateDbContextAsync();
        var userToRestore = await context.User.FirstOrDefaultAsync(u => u.UserId == id);
        if (userToRestore != null)
        {
            userToRestore.IsRestored = false;
            await context.SaveChangesAsync();
            await LoadData();
        }
    }

    private void SelectAllUsers()
    {
        bool allSelected = DeletedUsersTable.All(u => u.IsSelected);
        foreach (var user in DeletedUsersTable)
        {
            user.IsSelected = !allSelected;
        }
    }


    private async Task RestoreSelectedUsers()
    {
        await using var context = await ContextFactory.CreateDbContextAsync();
        foreach (var user in DeletedUsersTable.Where(u => u.IsSelected))
        {
            var userToRestore = await context.User.FirstOrDefaultAsync(u => u.UserId == user.UserId);
            if (userToRestore != null)
            {
                userToRestore.IsRestored = false;
            }
        }
        await context.SaveChangesAsync();
        await LoadData();
    }


    private void NavigateToUsers()
    {
        NavigationManager.NavigateTo("/Users");
    }

}