@page "/EditUser/{id:int}"
@using crudAppCW2.Models
@using crudAppCW2.Data
@using crudAppCW2.Data.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<AppDbContext> ContextFactory

<PageTitle>Edit User</PageTitle>

<h3>Edit User Info</h3>
<form>
    <div class="form-group">
        <label for="firstName">First Name</label>
        <input type="text" class="form-control" style="width: 450px;" id="firstName" @bind="User.FirstName"/>
    </div>
    <div class="form-group">
        <label for="lastName">Last Name</label>
        <input type="text" class="form-control" style="width: 450px;" id="lastName" @bind="User.LastName"/>
    </div>
    <div class="form-group">
        <label for="email">Email</label>
        <input type="email" class="form-control" style="width: 450px;" id="email" @bind="User.Email"/>
    </div>
    <div class="form-group d-flex">
        <div class="mr-4">
            <label for="role1">Choose Role:</label>
            <select @bind="User.RoleId" class="form-select" style="width: 160px;">
                <option value="1">Admin</option>
                <option value="2">User</option>
            </select>
        </div>

        <div>
            <label for="role2">Choose Department:</label>
            <select @bind="User.DepartmentId" class="form-select" style="width: 290px;">
                <option value="1">Admin</option>
                <option value="2">Commercial</option>
                <option value="3">Engineering</option>
                <option value="4">Fabrication</option>
                <option value="5">Golf Course</option>
                <option value="6">Human Resources</option>
                <option value="7">IT</option>
                <option value="8">Maintenance</option>
                <option value="9">Sales</option>
                <option value="10">Superior Walls</option>
            </select>
        </div>
    </div>
    <br/>
    <button class="btn btn-primary" @onclick="UpdateUser">Update</button>
</form>

@code {
    private User User { get; set; }
    private List<Department> Departments { get; set; }
    private List<Role> Roles { get; set; }

    [Parameter]
    public int Id { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await using var context = ContextFactory.CreateDbContext();
        User = await context.User
            .Include(x => x.Department)
            .Include(x => x.Role)
            .FirstOrDefaultAsync(x => x.Id == Id);
        Departments = await context.Department.ToListAsync();
        Roles = await context.Role.ToListAsync();
    }

    private async Task UpdateUser()
    {
        if (User == null)
        {
            return;
        }

        await using var context = ContextFactory.CreateDbContext();
        context.User.Update(User);
        await context.SaveChangesAsync();

        NavigationManager.NavigateTo("/Users");
    }

}