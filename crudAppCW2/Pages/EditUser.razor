@page "/EditUser/{id:int}"
@using crudAppCW2.Models
@using crudAppCW2.Data
@using crudAppCW2.Data.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<AppDbContext> ContextFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit User</PageTitle>

<h3>Edit User Information</h3>
@if (User is null)
{
    <div class="alert alert-danger">User with Id @Id was not found.</div>
}
else
{
    <form>
        <div class="form-group">
            <label for="firstName">First Name</label>
            <input type="text" class="form-control" style="width: 450px;" id="firstName" @bind="User.FirstName" @oninput="UpdateUser"/>
        </div>
        <div class="form-group">
            <label for="lastName">Last Name</label>
            <input type="text" class="form-control" style="width: 450px;" id="lastName" @bind="User.LastName" @oninput="UpdateUser"/>
        </div>
        <div class="form-group">
            <label for="email">Email</label>
            <input type="email" class="form-control" style="width: 450px;" id="email" @bind="User.Email" @oninput="UpdateUser"/>
        </div>
        <div class="form-group d-flex">
            <div class="mr-4">
                <label for="role1">Choose Role:</label>
                @foreach (var userRole in User.UserRoles)
                {
                    <div class="d-flex mb-2 me-3">
                        <select @bind="userRole.RoleId" class="form-select" style="width: 160px;">
                            @foreach (var role in Roles)
                            {
                                <option value="@role.RoleId">@role.Name</option>
                            }
                        </select>
                        <button type="button" class="btn btn-danger ms-2" @onclick="@(() => User.UserRoles.Remove(userRole))">
                            Remove
                        </button>
                    </div>
                }
                <button type="button" class="btn btn-primary" @onclick="@(() => User.UserRoles.Add(new UserRole { RoleId = 1 }))">
                    Add Role +
                </button>
            </div>

            <div>
                <label for="role2">Choose Department:</label>
                <select @bind="User.DepartmentId" class="form-select" style="width: 290px;">
                    @foreach (var department in Departments)
                    {
                        <option value="@department.DepartmentId">@department.Name</option>
                    }
                </select>
            </div>
        </div>

        <br/>
        <button class="btn btn-primary" @onclick="UpdateUser">Update</button>
    </form>
}

@code {
    private User User { get; set; }
    private List<Department> Departments { get; set; }
    private List<Role> Roles { get; set; }

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        await using var context = ContextFactory.CreateDbContext();
        User = await context.User
            .Include(x => x.Department)
            .Include(x => x.UserRoles)
            .FirstOrDefaultAsync(x => x.UserId == Id);
        Departments = await context.Department.ToListAsync();
        Roles = await context.Role.ToListAsync();
    }

    private async Task UpdateUser()
    {
        if (User == null)
        {
            return;
        }
        
        // Retrieve the selected Role and Department objects
        await using var context = ContextFactory.CreateDbContext();

        var userRoles = await context.UserRole.Where(x => x.UserId == User.UserId).ToListAsync();
        foreach (var userRole in User.UserRoles)
        {
            if (userRoles.Any(x => x.RoleId == userRole.RoleId)) continue;
            context.UserRole.Add(new UserRole { UserId = User.UserId, RoleId = userRole.RoleId });
        }
        foreach (var userRole in userRoles)
        {
            if (User.UserRoles.Any(x => x.RoleId == userRole.RoleId)) continue;
            context.UserRole.Remove(userRole);
        }
        
        // Update the User object with the selected Role and Department
        User.Department = await context.Department.FirstOrDefaultAsync(d => d.DepartmentId == User.DepartmentId);

        User.UserRoles.Clear();
        context.User.Update(User);
        await context.SaveChangesAsync();

        //NavigationManager.NavigateTo("/Users");
    }
}