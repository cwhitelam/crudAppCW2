@page "/Users"
@page "/Users/{currentPage:int?}"
@using crudAppCW2.Models
@using crudAppCW2.Data
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<AppDbContext> ContextFactory

<PageTitle>Users</PageTitle>

<h3>Users</h3>

@if (UsersTable == null)
{
    <p>Loading...</p>
}
else
{
    <ul class="pagination mt-3">
        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
            <a class="page-link" @onclick="@(() => NavigateToPage(CurrentPage - 1))" tabindex="-1">Previous</a>
        </li>
        @for (int i = 1; i <= TotalPages; i++)
        {
            <li class="page-item @(CurrentPage == i ? "active" : "")">
                <a class="page-link" @onclick="@(() => NavigateToPage(i))">@i</a>
            </li>
        }
        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
            <a class="page-link" @onclick="@(() => NavigateToPage(CurrentPage + 1))">Next</a>
        </li>
    </ul>

    <table class="table table-bordered table-striped">
        <thead>
        <tr>
            <th>User</th>
            <th>Email</th>
            <th>Role</th>
            <th>Department</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var User in UsersTable)
        {
            <tr>
                <td>@User.GetCapitalizedString(User.FirstName) @User.GetCapitalizedString(User.LastName)</td>
                <td>@User.Email</td>
                <td>
                    @foreach (var userRole in User.UserRoles)
                    {
                        <div class="me-1">
                            @userRole.Role?.Name
                        </div>
                    }
                </td>
                <td>
                    @User.Department?.Name
                </td>
                <td>
                    <button class="btn btn-danger" @onclick="async () => await DeleteUser(User.UserId)">Delete</button>
                    <button class="btn btn-primary" @onclick="(() => EditUser(User.UserId))">Edit</button>
                </td>
            </tr>
        }


        </tbody>
    </table>

    <br/>
    <td>
        <button class="btn btn-success" @onclick="NavigateToCreateUser">Create New User +</button>
        <button class="btn btn-danger" @onclick="NavigateToRestoreUser">Restore Deleted User(s)</button>

    </td>
}

@code {
    private List<User> UsersTable { get; set; }

    [Parameter]
    public int? CurrentPage { get; set; }
        
        private const int ItemsPerPage = 3;

    private int TotalPages { get; set; }


    [Inject]
    private NavigationManager NavigationManager { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (CurrentPage == null)
        {
            CurrentPage = 1;
        }

        await LoadData();
    }


    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }


    private async Task LoadData()
    {
        if (CurrentPage is null or < 1)
        {
            NavigationManager.NavigateTo("/Users/1");
            return;
        }

        await using var context = ContextFactory.CreateDbContext();
        var userCount = await context.User.CountAsync();
        TotalPages = userCount == 0 ? 1 : (int)Math.Ceiling((double)userCount / ItemsPerPage);

        if (CurrentPage > TotalPages)
        {
            NavigationManager.NavigateTo($"/Users/{TotalPages}");
            return;
        }

        var itemsToSkip = (CurrentPage.Value - 1) * ItemsPerPage;

        UsersTable = await context.User
            .Include(x => x.Department)
            .Include(x => x.UserRoles).ThenInclude(x => x.Role)
            .Where(x => !x.IsRestored)
            .OrderBy(u => u.FirstName.ToLower())
            .Skip(itemsToSkip)
            .Take(ItemsPerPage)
            .ToListAsync();
    }

    private async Task DeleteUser(int id)
    {
        await using var context = ContextFactory.CreateDbContext();
        var userToDelete = await context.User.FirstOrDefaultAsync(u => u.UserId == id);
        if (userToDelete != null)
        {
            userToDelete.IsRestored = true;
            await context.SaveChangesAsync();
            await LoadData();
        }
    }

    private void NavigateToCreateUser()
    {
        NavigationManager.NavigateTo("/CreateUser");
    }

    private void NavigateToRestoreUser()
    {
        NavigationManager.NavigateTo("/DeletedUsers");
    }

    private void EditUser(int id)
    {
        NavigationManager.NavigateTo($"/EditUser/{id}");
    }

    private void NavigateToPage(int? page)
    {
        if (page.HasValue && page.Value >= 1 && page.Value <= TotalPages)
        {
            NavigationManager.NavigateTo($"/Users/{page}");
        }
    }
}   