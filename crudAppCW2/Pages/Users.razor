@page "/Users"
@using crudAppCW2.Models
@using crudAppCW2.Data
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<AppDbContext> ContextFactory

<PageTitle>Users</PageTitle>

<h3>Users</h3>

@if (UsersTable == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>User</th>
            <th>Email</th>
            <th>Role</th>
            <th>Department</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var User in UsersTable)
        {
            <tr>
                <td>@User.GetCapitalizedString(User.FirstName) @User.GetCapitalizedString(User.LastName)</td>
                <td>@User.Email</td>
                <td>@(User.RoleId == 1 ? "Admin" : "User")</td>
                <td>
                    @(User.DepartmentId == 1 ? "Admin" :
                        User.DepartmentId == 2 ? "Commercial" :
                            User.DepartmentId == 3 ? "Engineering" :
                                User.DepartmentId == 4 ? "Fabrication" :
                                    User.DepartmentId == 5 ? "Golf Course" :
                                        User.DepartmentId == 6 ? "Human Resources" :
                                            User.DepartmentId == 7 ? "IT" :
                                                User.DepartmentId == 8 ? "Maintenance" :
                                                    User.DepartmentId == 9 ? "Sales" :
                                                        User.DepartmentId == 10 ? "Superior Walls" :
                                                            "Admin")
                </td>

                <td>
                    <button class="btn btn-danger" @onclick="(() => DeleteUser(User.Id))">Delete</button>
                    <button class="btn btn-primary" @onclick="(() => EditUser(User.Id))">Edit</button>
                </td>
            </tr>
        }

        </tbody>
    </table>

    <ul class="pagination mt-3">
        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
            <button class="page-link" disabled="@IsPrevDisabled" @onclick="LoadPrevPage">Previous</button>
        </li>
        @for (int i = 1; i <= TotalPages; i++)
        {
            <li class="page-item @(CurrentPage == i ? "active" : "")">
                <button class="page-link" @onclick="(() => OnPageChanged(i))">@i</button>
            </li>
        }
        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
            <button class="page-link" disabled="@IsNextDisabled" @onclick="LoadNextPage">Next</button>
        </li>
    </ul>

    <br/>
    <td>
        <button class="btn btn-success" @onclick="NavigateToCreateUser">Create User</button>
    </td>
}

@code {
    private List<User> UsersTable { get; set; }
    private List<User> PagedUsers { get; set; } = new List<User>();
    private int PageSize { get; set; } = 4;
    private int CurrentPage { get; set; } = 1;
    private bool IsPrevDisabled => CurrentPage == 1;
    private bool IsNextDisabled => (CurrentPage * PageSize) >= UsersTable.Count;
    private int TotalPages => (int)Math.Ceiling((double)UsersTable.Count / PageSize);


    [Inject]
    private NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        await using var context = ContextFactory.CreateDbContext();
        UsersTable = await context.User
            .Include(x => x.Department)
            .Include(x => x.Role)
            .ToListAsync();
        LoadPage();
    }

    private void LoadPage()
    {
        PagedUsers = UsersTable.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
    }

    private void LoadPrevPage()
    {
        CurrentPage--;
        LoadPage();
    }

    private void LoadNextPage()
    {
        CurrentPage++;
        LoadPage();
    }

    private void NavigateToCreateUser()
    {
        NavigationManager.NavigateTo("/CreateUser");
    }

    private async void DeleteUser(int id)
    {
        await using var context = ContextFactory.CreateDbContext();
        var userToDelete = await context.User.FirstOrDefaultAsync(u => u.Id == id);
        if (userToDelete != null)
        {
            context.User.Remove(userToDelete);
            await context.SaveChangesAsync();
            await LoadData();
        }
    }

    private void EditUser(int id)
    {
        NavigationManager.NavigateTo($"/EditUser/{id}");
    }

    private async Task OnPageChanged(int page)
    {
        CurrentPage = page;
        LoadPage();
    }


}