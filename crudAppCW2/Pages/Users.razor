@page "/Users"
@using crudAppCW2.Models
@using crudAppCW2.Data
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<AppDbContext> ContextFactory

<PageTitle>Users</PageTitle>

<h3>Users</h3>

@if (UsersTable == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>User</th>
            <th>Email</th>
            <th>Role</th>
            <th>Department</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var User in PagedUsers)
        {
            <tr>
                <td>@User.GetCapitalizedString(User.FirstName) @User.GetCapitalizedString(User.LastName)</td>
                <td>@User.Email</td>
                <td>
                    @foreach (var userRole in User.UserRoles)
                    {
                        <div class="me-1">
                            @userRole.Role?.Name
                        </div>
                    }
                </td>
                <td>
                    @User.Department?.Name
                </td>
                <td>
                    <button class="btn btn-danger" @onclick="async () => await DeleteUser(User.UserId)">Delete</button>
                    <button class="btn btn-primary" @onclick="(() => EditUser(User.UserId))">Edit</button>
                </td>
            </tr>
        }


        </tbody>
    </table>

    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            <li class="page-item @(IsPrevDisabled ? "disabled" : "")">
                <button class="page-link" disabled="@IsPrevDisabled" @onclick="LoadPrevPage" tabindex="-1">Previous</button>
            </li>
            @for (int i = 1; i <= TotalPages; i++)
            {
                <li class="page-item @(CurrentPage == i ? "active" : "")">
                    <button class="page-link" @onclick="(() => OnPageChanged(i))">@i</button>
                </li>
            }
            <li class="page-item @(IsNextDisabled ? "disabled" : "")">
                <button class="page-link" disabled="@IsNextDisabled" @onclick="LoadNextPage">Next</button>
            </li>
        </ul>
    </nav>


    <br/>
    <td>
        <button class="btn btn-success" @onclick="NavigateToCreateUser">Create User</button>
        <button class="btn btn-success" @onclick="NavigateToRestoreUser">Restore Deleted User</button>

    </td>
}

@code {
    private List<User> UsersTable { get; set; }
    private List<User> PagedUsers { get; set; } = new List<User>();
    private List<User> DeletedUsersTable { get; set; } = new List<User>();

    private int PageSize { get; set; } = 5;
    private int CurrentPage { get; set; } = 1;
    private bool IsPrevDisabled => CurrentPage == 1;
    private bool IsNextDisabled => (CurrentPage * PageSize) >= UsersTable.Count;
    private int TotalPages => (int)Math.Ceiling((double)UsersTable.Count / PageSize);

    [Inject]
    private NavigationManager NavigationManager { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        await using var context = ContextFactory.CreateDbContext();
        UsersTable = await context.User
            .Include(x => x.Department)
            .Include(x => x.UserRoles).ThenInclude(x => x.Role)
            .Where(x => !x.IsRestored)
            .OrderBy(u => u.FirstName.ToLower())
            .ToListAsync();
        LoadPage();
    }

    private void LoadPage()
    {
        PagedUsers = UsersTable.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
    }

    private void LoadPrevPage()
    {
        CurrentPage--;
        LoadPage();
    }

    private void LoadNextPage()
    {
        CurrentPage++;
        LoadPage();
    }

    private void NavigateToCreateUser()
    {
        NavigationManager.NavigateTo("/CreateUser");
    }

    private async Task DeleteUser(int id)
    {
        await using var context = ContextFactory.CreateDbContext();
        var userToDelete = await context.User.FirstOrDefaultAsync(u => u.UserId == id);
        if (userToDelete != null)
        {
            userToDelete.IsRestored = true;
            await context.SaveChangesAsync();
            await LoadData();
        }
    }

    private void NavigateToRestoreUser()
    {
        NavigationManager.NavigateTo("/DeletedUsers");
    }


    private void EditUser(int id)
    {
        NavigationManager.NavigateTo($"/EditUser/{id}");
    }

    private async Task OnPageChanged(int page)
    {
        CurrentPage = page;
        LoadPage();
    }

}