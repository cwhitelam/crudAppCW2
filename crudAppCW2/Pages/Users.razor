@page "/Users"
@using crudAppCW2.Models
@using crudAppCW2.Data
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<AppDbContext> ContextFactory


<PageTitle>Users</PageTitle>

<h3>Users</h3>

@if (UsersTable == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>User</th>
            <th>Email</th>
            <th>Role</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var User in UsersTable)
        {
            <tr>
                <td>@User.FirstName @User.LastName</td>
                <td>@User.Email</td>
                <td>@User.RoleId</td>
                <td>
                    <button class="btn btn-danger" @onclick="(() => DeleteUser(User.Id))">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

<button class="btn btn-success" @onclick="NavigateToCreateUser">Create User</button>


@code {
    private List<User> UsersTable { get; set; }

    [Inject]
    private NavigationManager _navigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await using var context = await ContextFactory.CreateDbContextAsync();
        UsersTable = await context.Users.ToListAsync();
    }

    private void NavigateToCreateUser()
    {
        _navigationManager.NavigateTo("/CreateUser");
    }

    private void DeleteUser(int id)
    {
        var userToDelete = UsersTable.FirstOrDefault(u => u.Id == id);
        if (userToDelete != null)
        {
            UsersTable.Remove(userToDelete);
        }
    }

}